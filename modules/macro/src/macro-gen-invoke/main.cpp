//
// Created by yarten on 24-1-9.
//

#include <fstream>
#include <sstream>

std::stringstream stream;

constexpr int max_args_count = 50;


void writeHead()
{
    stream << R"(/**
* \note This document is generated by the program. Please do not modify it.
*/

#pragma once

#include "./argument.h"

/**
 * \brief Single-parameter macro function expansion
 * \code
 *   // Define a single-parameter macro
 *   #define MY_MACRO(n) std::cout << n << std::endl;
 *
 *   // Invoke it with some values
 *   AOE_INVOKE(MY_MACRO, 1, 2, 3)
 *
 *   // This is equivalent to
 *   MY_MACRO(1) \
 *   MY_MACRO(2) \
 *   MY_MACRO(3)
 * \endcode
 */
#define AOE_INVOKE(_func_, ...) \
    AOE_CONCAT(AOE_DETAILS_INVOKE_WITH_0_, AOE_COUNT_ARGS(__VA_ARGS__))(_func_, __VA_ARGS__)

/**
 * \brief Expansion of a multiparameter macro function with fixed partial arguments
 * \code
 *   // Define a multi-parameter macro function with fixed parameters except for the last parameter.
 *   #define MY_MACRO(a, n) std::cout << a << " " << n << std::endl;
 *
 *   // Invoke it with some values
 *   AOE_INVOKE_WITH(MY_MACRO, 1, 666, 1, 2, 3)
 *
 *   // This is equivalent to
 *   MY_MACRO(666, 1) \
 *   MY_MACRO(666, 2) \
 *   MY_MACRO(666, 3)
 * \endcode
 */
#define AOE_INVOKE_WITH(_func_, _n_, ...)                  \
    AOE_CONCAT(                                                  \
        AOE_DETAILS_INVOKE_WITH_, _n_, _,                  \
        AOE_COUNT_ARGS(AOE_ARGS_EXCEPT_FIRST(_n_, __VA_ARGS__))  \
    )                                                            \
    (_func_, __VA_ARGS__)

// Keep the first n parameters and move the parameter to be expanded back one place.
#define AOE_DETAILS_INVOKE_SHIFT_ONE(_n_, ...) \
    AOE_CONCAT(AOE_DETAILS_INVOKE_SHIFT_ONE_, AOE_DETAILS_INVOKE_IS_ZERO(_n_))(_n_, __VA_ARGS__)

#define AOE_DETAILS_INVOKE_SHIFT_ONE_0(_n_, ...) \
    AOE_ARGS_EXCEPT_FIRST(1, __VA_ARGS__)

#define AOE_DETAILS_INVOKE_SHIFT_ONE_N(_n_, ...) \
    AOE_ARGS_FIRST(_n_, __VA_ARGS__), AOE_ARGS_EXCEPT_FIRST(1, AOE_ARGS_EXCEPT_FIRST(_n_, __VA_ARGS__))

// Helper macro ensures that the macro's arguments are properly expanded.
#define AOE_DETAILS_INVOKE_DO(_func_, ...) _func_(__VA_ARGS__)

// Determine whether a number is zero, return N if it is not zero
#define AOE_DETAILS_INVOKE_IS_ZERO(_n_) AOE_CONCAT(AOE_DETAILS_INVOKE_IS_ZERO_, _n_)

)";
}

void writeJudgeNumberIfIsZero()
{
    stream << "// Helper macro to determine if a number is zero" << std::endl;

    for (int i = 0; i <= max_args_count; ++i)
    {
        stream << "#define AOE_DETAILS_INVOKE_IS_ZERO_" << i << " " << (i == 0 ? "0" : "N") << std::endl;
    }

    stream << std::endl;
}

void writeInvokeWithFixedArguments()
{
    for (int fixed_count = 0; fixed_count <= max_args_count; ++fixed_count)
    {
        stream << "// Macro function expansion with " << fixed_count << " arguments" << std::endl;

        for (int var_count = 1; var_count <= max_args_count; ++var_count)
        {
            stream << "#define AOE_DETAILS_INVOKE_WITH_" << fixed_count << "_" << var_count << "(_func_, ...) " << '\\' << std::endl;

            if (var_count == 1)
            {
                if (fixed_count == 0)
                    stream << "    AOE_DETAILS_INVOKE_DO( _func_, AOE_ARGS_FIRST(1, __VA_ARGS__) )" << std::endl;
                else
                    stream << "    AOE_DETAILS_INVOKE_DO( _func_, AOE_ARGS_FIRST(" << fixed_count << ", __VA_ARGS__), "
                           << "AOE_ARGS_FIRST(1, AOE_ARGS_EXCEPT_FIRST(" << fixed_count << ", __VA_ARGS__)) )" << std::endl;
            }
            else
            {
                stream << "    AOE_DETAILS_INVOKE_WITH_" << fixed_count << "_1(_func_, __VA_ARGS__) " << '\\' << std::endl
                       << "    AOE_DETAILS_INVOKE_WITH_" << fixed_count << "_" << var_count - 1
                       << "(_func_, AOE_DETAILS_INVOKE_SHIFT_ONE(" << fixed_count << ", __VA_ARGS__))" << std::endl;
            }
        }

        stream << std::endl;
    }
}

int main()
{
    writeHead();
    writeJudgeNumberIfIsZero();
    writeInvokeWithFixedArguments();

    std::ofstream file("macro-gen-invoke.txt");
    file << stream.str() << std::endl;

    return 0;
}
